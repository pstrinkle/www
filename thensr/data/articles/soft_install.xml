<title>Linux Software Installation</title>
<author>James Smyth</author>
<img>nsr_images/_articles/_smalls/package-management.jpg</img>
<date>1/1/2006</date>
<area>linux</area>
<body><p class="body">In the beginning there was make, and sysadmins saw it was good. For everyone else in the world, other solutions were needed. I speak of course about getting software from word of mouth to something tangible on your system. One of the single largest problems that hindered the adaptation of Linux since the dawn of time was the problem of software installation.
<p class="body">In the early days of Linux, there was no room for installation. You used what came with your distribution or built it yourself, if you couldn't build it, nuts to you. There is a magical combination of console entries that will build just about anything:</p>
<table border="1">
<tr>
<td class="body" align="left"><b>tar zxvf ********.tar.gz (or tar jxvf *******.tar.bz2)
<br>cd ********
<br>make
<br>sudo make install</b></td></tr></table>
<p class="body">If that doesn't work, you're pretty much screwed. Compilation errors are common, leading you to wonder why software that was so buggy it wouldn't even compile was released.
<p class="body"><img src="nsr_images/_articles/package-management/rpm.jpg" align="left">The first distribution to provide an automated installation system was Red Hat which premiered the RPM Package Manager (yes, it's one of those pesky Linux recursive acronyms (some will says it's Red Hat Package Manager)) in the fall of 1995. The concept was simple. A single file ending in .rpm contains all the files of a program, a description of where each file will go, and a list of the files it relies on called a 'dependency list'. RPM worked fine as a system for putting together a distribution, but yielded innumeral problems when used to distribute software over the net as 'dependency goose chases' where each dependency has a list of unmet dependencies, as well as distribution incompatibility issues plagued the format. You might have /usr/lib/libmogl.so.0.0.2, but the RPM is looking for /usr/lib32/libmogl.so.0. The difference between the two libraries might be a simple renaming, but RPM is very specific. While you can create a series of links to force software to install (along with --nodeps --force), this can lead to bit rot of the worst kind.</p>
<p class="body"><img src="nsr_images/_articles/package-management/apt.jpg" align="left">To provide a more robust and less aggravating installation automation system, the Slackware derived Debian came up with the Advanced Package Tool (apt) in 1999. At first it worked very much like RPMs, you would download a file ending in .deb and it would be formatted very much like RPMs, except for one powerful tool, it would automatically download the files that it discovered it needed. Since this was specific to one distribution, you would be assured that most of the time it would work. It still had problems with conflicting versions of software, but this was much less of a problem. Eventually apt would go one step further with apt-get which would actually download on-demand software. <b>apt-get install kde</b> would download and install everything needed to get the KDE Desktop Environment up and running.</p>
<p class="body"><img src="nsr_images/_articles/package-management/urpmi.jpg" align="left">Following this lead, Mandrake (now Mandriva) created URPMI, which would wrap around RPM. When used, it would automatically download dependencies for PMs and would even do tasks similar to apt-get. Unfortunately this wrapper system would never get wide acceptance.</p>
<p class="body"><img src="nsr_images/_articles/package-management/ports.jpg" align="left">FreeBSD, while not a Linux system technically, came up with their own solution. They came up with the 'ports' collection. FreeBSD was in a unique position in that there was only one version of FreeBSD, so no competing ways of doing things, no other directory structures, no other library nomenclatures to deal with. Anything in the 'ports' collection would work with FreeBSD no matter what. The interface was called pkg_add (there is also pkg_delete, etc). <b>pkg_add -r kde</b> would do the same thing as <b>apt-get install kde</b> with one very key difference.</p>
<p class="body">pkg_add will download the source of the application and compile it and install it for you, and the compile would ACTUALLY work. No 'gcc/g++/ld error' nonsense. Since compilation errors are usually the product of different versions of GCC being used with different Linux distributions, there is no chance of a conflict unless you decide to force a different version of GCC than the standard FreeBSD included version. Some will argue that software compiled on your home system will be tailored for your system and hence run faster. I say that's full of crap, but if you believe it, then more power to you. The option is here for your to use. While still in the land of console, the fact of the matter is that this was the first package management system to really work.</p>
<p class="body"><img src="nsr_images/_articles/package-management/portage.jpg" align="left">The latest popular package managment system is that used by Gentoo. Gentoo is famous for being the Linux that you hand build from scratch, even the kernel you compile and install yourself. But Gentoo takes a hint from FreeBSD and implements a system almost identical to the Ports system. They instead use the cryptic name 'portage'. Which works pretty much the same way. In order to prevent problems with using software built for other distributions they distance themselves from RPM and APT. While you can still use RPM and APT if you must, you can use Portage and be confident that what is downloaded will build, install, and run just fine. Just like Ports, they have a collection of several thousand applications which is constantly updated, very few applications you will have to download and install yourself.</p>
<p class="body"><img src="nsr_images/_articles/package-management/synaptic.jpg" align="left">Late 2004 saw the latest thing in Linux software management come not as a new packaging system, but as a new interface to APT. Ubuntu would arise as the new king of the Linux mountain with Synaptic. While it was all just apt underneath, the slick new GUI didn't let on that it was anything other than itself. Like Debian, FreeBSD, and Gentoo, Ubuntu would have an online repository of software built specifically for their distribution containing thousands upon thousands of popular applications. The simplified GUI approach to software installation has single handedly revolutionized Linux. Synaptic is arguably the single reason that Ubuntu went from unheard-of in mid 2004 to the most popular distribution in mid 2005.</p>
<p class="body"><img src="nsr_images/_articles/package-management/loki.jpg" align="left">So far I've only discussed installation for open-source software. What about commercial software? Thankfully there was a company called Loki Games that dedicated itself to porting popular Windows games to Linux. Unfortunately they were doing the right thing at the wrong time and went bankrupt. While active, they gave the Linux community OpenAL (a gaming audio library) and the Setup Graphic Installer (aka the Loki Installer). Loki used the installer on all of their products and many commercial software companies used it as well as a quick and easy way to make sure their software would install across all distributions. It works so well infact, that many open source applications use it as an alternative to RPM and APT.</p>
<p class="body">That's where we stand today. Ports, Portage, RPM, and APT/Synaptic are all in use today and all have their advantages and disadvantages. Like the distributions wars you are just as likely to come across evangelical software installation zeliots. What it comes down to is that Synaptic is the way of the future. Love it or hate it, Linux newbies might never have to see a terminal.</p>
<p class="citetext">Image sources:
<br>RPM: <a href="http://www.rpm.org/images/rpmlogo-mini.jpg">http://www.rpm.org/images/rpmlogo-mini.jpg</a>
<br>Apt: <a href="http://www.debian.org/logos/openlogo-nd-50.png">http://www.debian.org/logos/openlogo-nd-50.png</a>
<br>URPMi: <a href="http://www.vivaolinux.com.br/imagens/artigos/comunidade/mandrake.png">http://www.vivaolinux.com.br/imagens/artigos/comunidade/mandrake.png</a>
<br>Ports: <a href="http://www.freebsd.org/layout/images/beastie.png">http://www.freebsd.org/layout/images/beastie.png</a>
<br>Portage: <a href="http://www.gentoo.org/images/gtop-www.jpg">http://www.gentoo.org/images/gtop-www.jpg</a>
<br>Synaptic: <a href="http://www.ubuntulinux.org/include/header-image4.png">http://www.ubuntulinux.org/include/header-image4.png</a>
<br>Loki: <a href="http://archive.gamespy.com/articles/may01/wine/lk.jpg">http://archive.gamespy.com/articles/may01/wine/lk.jpg</a></p></body>